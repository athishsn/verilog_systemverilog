module dff (clk, reset, d, q, qb);
  input      clk;
  input      reset;
  input      d;
  output     q;
  output     qb;

  reg        q;

  assign qb = ~q;

  always @(posedge clk or posedge reset)
  begin
    if (reset) begin
      // Asynchronous reset when reset goes high
      q <= 1'b0;
    end else begin
      // Assign D to Q on positive clock edge
      q <= d;
    end
  end
endmodule



module test; //Test BEnch for the above D flipflop

  reg clk;
  reg reset;
  reg d;
  wire q;
  wire qb;
  
   
  dff DFF(.clk(clk), .reset(reset), .d(d), .q(q), .qb(qb));  // Instantiaing the D flipflop          
  initial begin
  
    $dumpfile("dump.vcd");  // dumping the waveforms
    $dumpvars(1);
    
    $display("Reset flop.");
    clk = 0;
    reset = 1;             //resetting the D flipflop
    d = 1'bx;
    display;
    
    $display("Release reset.");
    d = 1;
    reset = 0;
    display;

    $display("Toggle clk.");
    clk = 1;
    display;
  end
  
  task display;
    #1 $display("d:%0h, q:%0h, qb:%0h",
      d, q, qb);
  endtask

endmodule
